# makefile :)
PWDIR := $(shell pwd)
DEPS_DIR := $(PWDIR)/in
OUT_DIR := $(PWDIR)/out
CMAKE_DIR := $(PWDIR)/toolchain/cmake/bin/
LINUX_CROSS_PREFIX := $(PWDIR)/toolchain/linux_toolchain/bin/riscv64-unknown-linux-gnu-
ELF_CROSS_PREFIX := $(PWDIR)/toolchain/elf_newlib_toolchain/bin/riscv64-unknown-elf-
OPENSBI_DIR := $(PWDIR)/opensbi-0.6-808
OBJ_DIR := $(OUT_DIR)/obj
DTB_FILE := $(OUT_DIR)/hw.dtb.5M
DTS_FILE := $(PWDIR)/bl808_dts/hw808c.dts
OPENSBI_FILE := $(OUT_DIR)/fw_jump.bin
ROOTFS_FILE := $(DEPS_DIR)/squashfs_test.img
KERNEL_IMAGE_FILE := $(OUT_DIR)/Image.lz4
OUTPUT_BIN := $(OUT_DIR)/whole_img_linux.bin
BOOT_SRC := $(PWDIR)/bl_mcu_sdk_bl808/
BOOT_OUT := $(BOOT_SRC)/out/examples/low_load
LINUX_SRC := $(PWDIR)/linux-5.10.4-808
FLASH_SIZE := $(shell echo $$((7680 * 1024 - 335872)))
DTB_OFFSET := $(shell printf "%d" 0x00000000)
OPENSBI_OFFSET := $(shell printf "%d" 0x00010000)
KERNEL_OFFSET := $(shell printf "%d" 0x00020000)
ROOTFS_OFFSET := $(shell printf "%d" 0x00480000)

all: clean prepare opensbi linux kcompress devicetree bootloader image

prepare:
	@mkdir -p $(OUT_DIR)
	@mkdir -p $(OBJ_DIR)

opensbi:
	@cd $(OPENSBI_DIR) && make PLATFORM=thead/c910 CROSS_COMPILE=$(LINUX_CROSS_PREFIX) -j$(nproc)
	@cp $(OPENSBI_DIR)/build/platform/thead/c910/firmware/* $(OUT_DIR)/obj
	@cp $(OPENSBI_DIR)/build/platform/thead/c910/firmware/fw_jump.bin $(OUT_DIR)

menuconfig:
	@cd $(PWDIR)/linux-5.10.4-808 && make ARCH=riscv CROSS_COMPILE=$(LINUX_CROSS_PREFIX) menuconfig -j$(nproc)

image:
	@cd $(OUT_DIR)
	@dd if=/dev/zero bs=1 count=$(FLASH_SIZE) | tr '\000' '\377' > $(OUTPUT_BIN)
	@dd if=$(DTB_FILE) of=$(OUTPUT_BIN) bs=1 seek=$(DTB_OFFSET) conv=notrunc
	@dd if=$(OPENSBI_FILE) of=$(OUTPUT_BIN) bs=1 seek=$(OPENSBI_OFFSET) conv=notrunc
	@dd if=$(KERNEL_IMAGE_FILE) of=$(OUTPUT_BIN) bs=1 seek=$(KERNEL_OFFSET) conv=notrunc
	@dd if=$(ROOTFS_FILE) of=$(OUTPUT_BIN) bs=1 seek=$(ROOTFS_OFFSET) conv=notrunc
	@echo "Image built: $(OUTPUT_BIN)"

devicetree:
	@dtc -I dts -O dtb -o $(DTB_FILE) $(DTS_FILE)

bootloader:
	@echo "Building m0boot"
	@cd $(BOOT_SRC) && make CHIP=bl808 CPU_ID=m0 CMAKE_DIR=$(CMAKE_DIR) CROSS_COMPILE=$(ELF_CROSS_PREFIX) SUPPORT_DUALCORE=y APP=low_load
	@echo "Copying m0boot build artifacts"
	@cp -r $(BOOT_OUT)/* $(OBJ_DIR)
	@echo "Cleaning m0boot build artifacts"
	@cd $(BOOT_SRC) && make CMAKE_DIR=$(CMAKE_DIR) clean
	@echo "Building d0boot"
	@cd $(BOOT_SRC) && make CHIP=bl808 CPU_ID=d0 CMAKE_DIR=$(CMAKE_DIR) CROSS_COMPILE=$(ELF_CROSS_PREFIX) SUPPORT_DUALCORE=y APP=low_load
	@echo "Copying d0boot build artifacts"
	@cp -r $(BOOT_OUT)/* $(OBJ_DIR)
	@echo "Cleaning m0boot build artifacts"
	@cd $(BOOT_SRC) && makeCMAKE_DIR=$(CMAKE_DIR) clean
	@echo "OBJSW"
	@cp $(OBJ_DIR)/low_load_bl808_m0.bin $(OUT_DIR)
	@cp $(OBJ_DIR)/low_load_bl808_d0.bin $(OUT_DIR)


linux:
	@cd $(LINUX_SRC) && \
	if [ ! -f .config ]; then cp c906.config .config; fi
	@cd $(LINUX_SRC) && make ARCH=riscv CROSS_COMPILE=$(LINUX_CROSS_PREFIX) Image -j$(shell nproc)
	@cp $(LINUX_SRC)/arch/riscv/boot/Image $(OBJ_DIR)

kcompress:
	@lz4 -9 -f $(LINUX_SRC)/arch/riscv/boot/Image $(LINUX_SRC)/arch/riscv/boot/Image.lz4
	@cp $(LINUX_SRC)/arch/riscv/boot/Image.lz4 $(OUT_DIR)



clean:
	@rm -rfv $(OUT_DIR)
	@rm -rfv $(OPENSBI_DIR)/build
	@rm -rfv $(OPENSBI_DIR)/build
	@cd $(LINUX_SRC) && make clean
	@cd $(BOOT_SRC) && make CMAKE_DIR=$(CMAKE_DIR) clean



.PHONY: all image clean kcompress linux bootloader devicetree image menuconfig opensbi prepare